(function() {
  var Logger, fs = require('fs');
  Logger = (function() {
    function Logger(options) {
      var level, num, _ref;
      this.options = options || {};
      this.level = this.options.level || Logger.levels.info;
      _ref = Logger.levels;
      for (level in _ref) {
        num = _ref[level];
        Logger.define(this, level);
      }
    }
    Logger.prototype.add = function(level, message, callback) {
      if (this.level > (Logger.levels[level] || 5)) {
        return;
      }
      if (callback) {
        message = callback();
      } else if (typeof message === 'function') {
        message = message();
      }
      return this.write({
        timestamp: new Date,
        severity: level,
        message: message,
        pid: process.pid
      });
    };
    Logger.prototype.write = function(options) {
      var log = fs.createWriteStream('blog.log', {'flags': 'a'});
      var message = this.build_message(options)
      console.log( message );
      log.write( '\n' + message );
      return message;
    };
    Logger.prototype.build_message = function(options) {
      return ("[" + (options.timestamp.getUTCFullYear())) + ("-" + (options.timestamp.getUTCMonth() + 1)) + ("-" + (options.timestamp.getUTCDay())) + ("T" + (options.timestamp.getUTCHours())) + (":" + (options.timestamp.getUTCMinutes())) + (":" + (options.timestamp.getUTCSeconds())) + ("." + (options.timestamp.getUTCMilliseconds())) + (" " + options.severity + " (" + process.pid + ")] ") + ("" + options.message);
    };
    return Logger;
  })();
  Logger.define = function(logger, level) {
    return logger[level] = function(message, callback) {
      return this.add(level, message, callback);
    };
  };
  Logger.levels = {
    debug: 1,
    info: 2,
    warn: 3,
    error: 4,
    fatal: 5
  };
  exports.create = function(type, options) {
    return new Logger(options);
  };
}).call(this);
